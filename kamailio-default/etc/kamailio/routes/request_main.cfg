/* Main SIP request routing logic
 * - processing of any incoming SIP request starts with this route
 * - note: this is the same as route { ... } */
request_route {

	# pike_check_req will return True / 1 if a source IP is allowed
	# if not, exit as the source is thought to be flooding traffic.
	if (!pike_check_req()) { 
		exit; 
	}
	# Check the htable blacklist, and secfilter db 
	route(BLACKLIST);
	# Perform initial sanity check
	route(REQINIT);
	route(SET_DIRECTION_FLAG);
	route(SET_SOCKET);

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

	# handle retransmissions
	if (!is_method("ACK")) {
		if(t_precheck_trans()) {
			t_check_trans();
			exit;
		}
		t_check_trans();
	}

	# Handle REGISTER Requests
	route(HANDLE_REGISTER);

	#Strip unsupported codecs
	route(REMOVE_CODECS_INBOUND);

	#Manage RTP
	route(SET_RTP_REQUEST);

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE")) {
		record_route();
	}
	
	# account only INVITEs
	if (is_method("INVITE")) {
		route(SET_CDR_VARS); # Route to set inital CDR vars
		setflag(FLT_DLG); #stores CDR in acc_cdrs table
        setflag(FLT_ACC); # Stores transaction level
	}

	if ($rU==$null) {
		# request with no Username in RURI
		sl_send_reply("484", "Address Incomplete");
		exit;
	}

	# Determine outbound route
	if(method=="INVITE"){

		# Route calls from outside to the core b2buas. 
		if(isflagset(FLT_FROM_PUBLIC)){
			#!ifdef RTJSON_INBOUND

			xlog("L_INFO", "Attempting to lookup with RTJSON \n");
			route(HANDLE_HTTP_REQUEST);
 			#!else

			# route to the core b2bua
			xlog("L_INFO", "Attempting to route call from  $fU to $tU  with dispatcher! \n");
			ds_select_dst(1, 4);
			t_on_failure("FAILED_DISPATCH");
			#!endif
		} 

		if(isflagset(FLT_FROM_CORE)){
			# check if the call came from the dispatchers
			if(ds_is_from_list()) {
				# Check for registrations
				if(!lookup("location")){
					xlog("L_INFO", "$tU is not registered. Checking ENUM. \n");
					# Check for ENUM entries. If no entry 404, and exit.  
					if (!enum_query()) {
						xlog("L_INFO", "ENUM_LOOKUP | RURI does not match enum records $rU  \n");
						sl_send_reply("404", "Destination is not found"); 
						exit;
					}
					xlog("L_INFO", "ENUM_LOOKUP | ENUM record found for $rU  \n");
					# Required for failover
					if (!t_load_contacts()) { # Get all of the ENUM basexd contacts 
						sl_send_reply("500", "Server Internal Error - Cannot load contacts");
						exit;
					}
					if (!t_next_contacts()) { # Get the first contact 
						sl_send_reply("500", "Server Internal Error - Cannot load contacts");
						exit;
					}	
					t_set_fr(5000);  # Set the Invite time-out to 5 seconds for this transaction
					t_on_failure("FAILED_SERIAL"); # This failure route manages the failure
				} 
			} else { 
				xlog("L_INFO", "Call from within the core did nto originate from a known B2BUA. CID: $ci  \n");
			}
		}
	}
	route(RELAY);
	exit;
}
